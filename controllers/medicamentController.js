const Medicament = require("../models/Medicament");

// üìå Ajouter un m√©dicament pour le patient connect√©
exports.ajouterMedicament = async (req, res) => {
  try {
    const {
      dateDebut,
      dateFin,
      dosage,
      frequence,
      nomCommercial,
      voieAdministration,
      horaires,
    } = req.body;

    // üîπ V√©rification de la coh√©rence entre fr√©quence et horaires
    if (
      !horaires ||
      !Array.isArray(horaires) ||
      horaires.length !== frequence
    ) {
      return res.status(400).json({
        message: `Vous devez fournir exactement ${frequence} horaires.`,
      });
    }

    // üîπ Cr√©ation du m√©dicament avec association au patient connect√©
    const medicament = new Medicament({
      patient: req.user._id,
      dateDebut,
      dateFin,
      dosage,
      frequence,
      nomCommercial,
      voieAdministration,
      horaires,
    });

    await medicament.save();

    res.status(201).json({
      message: "M√©dicament ajout√© avec succ√®s.",
      medicament,
    });
  } catch (error) {
    console.error("Erreur lors de l'ajout du m√©dicament:", error);
    res.status(500).json({ message: error.message });
  }
};
// üìå Obtenir les m√©dicaments du patient connect√©
exports.getMedicaments = async (req, res) => {
  try {
    const patientId = req.user._id;
    console.log("üîç ID du patient connect√© :", patientId);

    const medicaments = await Medicament.find({ patient: patientId });

    console.log("üì¶ M√©dicaments trouv√©s :", medicaments);

    if (!medicaments.length) {
      return res.status(404).json({
        message: "Aucun m√©dicament trouv√©.",
      });
    }

    res.status(200).json(medicaments);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des m√©dicaments:", error);
    res.status(500).json({
      message: "Erreur lors de la r√©cup√©ration des m√©dicaments",
      error: error.message,
    });
  }
};

// Ajouter un m√©dicament pour un patient sp√©cifique (par un m√©decin)
exports.ajouterMedicamentParMedecin = async (req, res) => {
  try {
    const {
      dateDebut,
      dateFin,
      dosage,
      frequence,
      nomCommercial,
      voieAdministration,
      horaires,
    } = req.body;

    const patientId = req.params.id; // Lire l'ID du patient depuis l'URL

    // üîπ V√©rification de la coh√©rence entre fr√©quence et horaires
    if (
      !horaires ||
      !Array.isArray(horaires) ||
      horaires.length !== frequence
    ) {
      return res.status(400).json({
        message: `Vous devez fournir exactement ${frequence} horaires.`,
      });
    }

    // üîπ Cr√©ation du m√©dicament pour le patient sp√©cifi√©
    const medicament = new Medicament({
      patient: patientId, // Associer le m√©dicament au patient sp√©cifi√©
      dateDebut,
      dateFin,
      dosage,
      frequence,
      nomCommercial,
      voieAdministration,
      horaires,
    });

    await medicament.save();

    res.status(201).json({
      message: "M√©dicament ajout√© avec succ√®s pour le patient.",
      medicament,
    });
  } catch (error) {
    console.error(
      "Erreur lors de l'ajout du m√©dicament par le m√©decin:",
      error
    );
    res.status(500).json({ message: error.message });
  }
};
//getMedicamentsParPatient
exports.getMedicamentsParPatient = async (req, res) => {
  try {
    const patientId = req.params.id;
    const medicaments = await Medicament.find({ patient: patientId });
    res.status(200).json(medicaments);
  } catch (error) {
    res.status(500).json({ message: "Erreur serveur", error });
  }
};
// Mettre √† jour un m√©dicament
exports.updateMedicament = async (req, res) => {
  try {
    const medicament = await Medicament.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true }
    );
    if (!medicament) {
      return res.status(404).send();
    }
    res.status(200).send(medicament);
  } catch (error) {
    res.status(400).send(error);
  }
};
// ‚úÖ Supprimer un m√©dicament
exports.deleteMedicament = async (req, res) => {
  try {
    // Tente de supprimer par ID
    const medicament = await Medicament.findByIdAndDelete(req.params.id);

    // S'il n'existe pas ‚ûú 404
    if (!medicament) {
      return res.status(404).json({ message: "M√©dicament introuvable" });
    }

    // Succ√®s ‚ûú 200 + message + (optionnel) le doc supprim√©
    res.status(200).json({
      message: "M√©dicament supprim√© avec succ√®s",
      medicament, // ‚Üê enl√®ve cette ligne si tu ne veux pas renvoyer l'objet
    });
  } catch (error) {
    console.error("Erreur lors de la suppression :", error);
    res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
};
